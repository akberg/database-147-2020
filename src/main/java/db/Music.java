package db;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;


public class Music extends ActiveDomainObject {

    String title;
    String composer;
    String performer;

    // Constructors

    public Music(int id, String title, String composer, String performer) {
        this.ID = id;
        this.title = title;
        this.composer = composer;
        this.performer = performer;
    }

    public Music(String title, String composer, String performer) {
        this(-1, title, composer, performer);
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getComposer() {
        return composer;
    }

    public void setComposer(String composer) {
        this.composer = composer;
    }

    public String getPerformer() {
        return performer;
    }

    public void setPerformer(String performer) {
        this.performer = performer;
    }

    /**
     * Returns all Film objects using this music in their soundtrack
     * @return list of Film objects
     */
    public List<Film> getFilms() {
        List<Film> res = new ArrayList<>();
        try {
            PreparedStatement stmt = conn.prepareStatement("select * from Soundtrack where music_id=" + this.ID);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                res.add(
                    Film.get("film_id=" + rs.getInt("film_id"))
                );
            }
        } catch (SQLException e) {
            System.out.println("Feil under databaseoperasjon: " + e);
        }
        return res;
    }

    @Override
    public String toString() {
        return this.title + "\t Skrevet av " + composer + "\t Fremf√∏rt av " + performer;
    }

    public static Music get(String constraint) throws SQLException {
        Music res;
        PreparedStatement stmt = conn.prepareStatement("select * from Music where " + constraint);
        // Select all from an object satisfying contstraints
        ResultSet rs = stmt.executeQuery();

        if (!rs.next()) {
            throw new SQLException("Ingen treff.");
        } 
        res = new Music(
            rs.getInt("music_id"),
            rs.getString("title"),
            rs.getString("composer"),
            rs.getString("performer")
        );

        if (rs.next()) {
            throw new SQLException("Mer enn ett treff!");
        }

        return res;
    }

    /**
     * Save object to database
     * 
     * Inserts object if ID=-1, otherwise updates the entry with id=ID
     */
    @Override
    public void save() {
        try {
            PreparedStatement stmt;
            if (ID == -1) {
                stmt = conn.prepareStatement("insert into Music (title, composer, performer) values (?, ?, ?)", 1);
            } else {
                // Only update if object already exists in db
                stmt = conn.prepareStatement("update Music set title=?, composer=?, performer=? where music_id=" + this.ID);
            }
            stmt.setString(1, this.title);
            stmt.setString(2, this.composer);
            stmt.setString(3, this.performer);
            stmt.executeUpdate();
            conn.commit();
            
            if (ID == -1) {
                // Update with autogenerated pk
                ResultSet rs = stmt.getGeneratedKeys();
                rs.next();
                this.ID = rs.getInt(1);
            }
        } catch (Exception e) {
            System.out.println("db error during update of bruker="+e);
        }
    }
}