package db;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

public class Series extends ActiveDomainObject {

    private int comp_id;
    private String title;
    private Boolean movie = null;

    public Series(int id, int comp_id, String title) {
        this.ID = id;
        this.comp_id = comp_id;
        this.title = title;
    }

    public Series(int comp_id, String title) {
        if (comp_id == -1) {
            throw new IllegalStateException("Company må være lagret i databasen.");
        }
        this.ID = -1;
        this.comp_id = comp_id;
        this.title = title;
    }

    public Series() {
        this.ID = -1;
    }

    public boolean isMovie() {
        if (movie != null) {
            return (boolean)movie;
        } else {
            List<Film> episodes = getEpisodes();
            movie = episodes.size() == 1 && !episodes.get(0).isEpisode();
            return (boolean)movie;
        }
    }

    public int getComp_id() {
        return comp_id;
    }

    public Company getCompany() throws SQLException {
        return Company.get("comp_id=" + comp_id);
    }

    public void setComp_id(int comp_id) {
        this.comp_id = comp_id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public List<Film> getEpisodes() {
        List<Film> res = new ArrayList<>();
        try {
            PreparedStatement stmt = conn.prepareStatement("select * from Film where series_id=" + this.ID);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                Film f = Film.get("film_id=" + rs.getInt("film_id"));
                res.add(f);
            }
        } catch (SQLException e) {
            System.out.println("Feil under databaseoperasjon Series.java:64: " + e);
        }
        return res;
    }

    public static Series get(String constraint) throws SQLException {
        Series res;
        Statement stmt = conn.createStatement();
        // Select all from an object satisfying contstraints
        ResultSet rs = stmt.executeQuery("select * from Series where " + constraint);

        if (!rs.next()) {
            throw new SQLException("Ingen treff.");
        }
        res = new Series(
            rs.getInt("series_id"),
            rs.getInt("comp_id"),
            rs.getString("title")
        );

        if (rs.next()) {
            throw new SQLException("Mer enn ett treff!");
        }

        return res;
    }

    @Override
    public void save() {
        try {
            PreparedStatement stmt;
            if (ID == -1) {
                stmt = conn.prepareStatement("insert into Series (comp_id, title) values (?, ?)", Statement.RETURN_GENERATED_KEYS);
            } else {
                // Only update if object already exists in db
                stmt = conn.prepareStatement("update Series set comp_id=?, title=? where series_id=" + this.ID);
            }
            stmt.setInt(1, this.comp_id);
            stmt.setString(2, this.title);
            stmt.executeUpdate();
            conn.commit();
            
            if (ID == -1) {
                // Update with autogenerated pk
                ResultSet rs = stmt.getGeneratedKeys();
                rs.next();
                this.ID = rs.getInt(1);
            }
        } catch (Exception e) {
            System.out.println("Feil under databaseoperasjon: "+e);
        }
    }

    
}